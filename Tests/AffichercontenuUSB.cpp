/*#include <iostream>
#include <cstdlib>
#include <thread>
#include <chrono>


void DetecterUSB() {
    while (true) {
        std::cout << "Recherche de p√©riph√©riques USB...\n";
        int result = system("lsblk -o NAME,MOUNTPOINT,SIZE,MODEL | grep sd");
        if (result == 0) {
            std::cout << "Cl√© USB d√©tect√©e !\n";
            break;
        }
        std::this_thread::sleep_for(std::chrono::seconds(2)); // V√©rification toutes les 2 secondes
        std::cout << "D√©tection des p√©riph√©riques USB..." << std::endl;
    }
}

int main ()
{
	DetecterUSB() ;
return 0;
}

*/
#include <iostream>
#include <cstdlib>
#include <thread>
#include <chrono>
#include <filesystem>
#include <fstream>

namespace fs = std::filesystem;

// üîπ Chemin FIXE pour le point de montage de la cl√© USB
const std::string USB_MOUNT_PATH = "/media/projet/EMTEC C450";

// Fonction pour v√©rifier si la cl√© USB est accessible
bool VerifierAccessibiliteUSB(const std::string& path) {
    if (fs::exists(path) && fs::is_directory(path)) {
        std::cout << "‚úÖ Cl√© USB d√©tect√©e avec succ√®s √† : " << path << std::endl;
        return true;
    } else {
        std::cerr << "‚ùå Erreur : Le chemin '" << path << "' n'existe pas ou la cl√© USB n'est pas mont√©e.\n";
        return false;
    }
}

// Fonction pour afficher le contenu de la cl√© USB
void AfficherContenuUSB(const std::string& path) {
    if (!VerifierAccessibiliteUSB(path)) return;

    std::cout << "üìÇ Contenu de la cl√© USB (" << path << ") :\n";
    for (const auto& entry : fs::directory_iterator(path)) {
        std::cout << "  - " << entry.path().filename().string() << "\n";
    }
}

// Fonction pour scanner la cl√© USB avec ClamAV
void ScannerUSB(const std::string& path) {
    if (!VerifierAccessibiliteUSB(path)) return;

    std::cout << "üõ°Ô∏è Scan de la cl√© USB en cours...\n";

    // üîπ Ajout de guillemets pour √©viter les erreurs dues aux espaces
    std::string scanCommand = "clamscan -r --stdout \"" + path + "\" > scan_result.txt 2>&1";
    int scanStatus = system(scanCommand.c_str());

    if (scanStatus != 0) {
        std::cerr << "‚ùå Erreur lors de l'ex√©cution du scan ClamAV. V√©rifiez que ClamAV est install√© et que la cl√© est accessible.\n";
        return;
    }

    // V√©rifier si le fichier scan_result.txt existe avant de l'ouvrir
    std::ifstream resultFile("scan_result.txt");
    if (!resultFile) {
        std::cerr << "‚ùå Erreur : Impossible d'ouvrir le fichier scan_result.txt.\n";
        return;
    }

    std::string line;
    bool virusFound = false;

    while (getline(resultFile, line)) {
        if (line.find("FOUND") != std::string::npos) {
            std::cout << "üö® Virus d√©tect√© : " << line << std::endl;
            virusFound = true;
        }
    }
    resultFile.close();

    if (virusFound) {
        std::cout << "‚ùì Voulez-vous supprimer les fichiers infect√©s ? (y/n) : ";
        char choice;
        std::cin >> choice;
        if (choice == 'y' || choice == 'Y') {
            std::string deleteCommand = "clamscan --remove -r \"" + path + "\"";
            system(deleteCommand.c_str());
            std::cout << "üóëÔ∏è Fichiers infect√©s supprim√©s !\n";
        }
    } else {
        std::cout << "‚úÖ Aucun virus d√©tect√© sur la cl√© USB.\n";
    }
}

// Programme principal
int main() {
    std::cout << "üîç V√©rification de la cl√© USB...\n";
    if (!VerifierAccessibiliteUSB(USB_MOUNT_PATH)) {
        return 1; // Quitte le programme si la cl√© n'est pas trouv√©e
    }

    AfficherContenuUSB(USB_MOUNT_PATH);
    ScannerUSB(USB_MOUNT_PATH);

    return 0;
}
